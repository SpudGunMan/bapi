BAPP=4
ID=GridTracker
Name=GridTracker
Comment='display data from WSJT/AIDF on a map'
VerLocal=0
VerRemote=0
W3='https://gridtracker.org'
Author='spud'
NOTE='commonly has download issues FYI'

INSTALL(){
    echo -e "INFORMATIONAL: apt-get required packages"
	sudo apt-get install -y libgconf-2-4 >> errors/apt.log

    cd ${BAPSRC}
	rm -rf gridtracker
	mkdir gridtracker
	cd gridtracker

	# https://gridtracker.org/index.php/downloads/gridtracker scrape the version number
	ver=$(curl --max-time 20 -s https://gridtracker.org/index.php/downloads/gridtracker | grep osdownloads-container -A 4 | sed 's/.*">//' | grep -m 1 v | sed 's/<\/a> <\/h3>//' | sed 's/\./-/'g)
	echo -e "INFORMATIONAL: GridTracker version $ver"

	arm64=https://gridtracker.org/index.php/component/osdownloads/download/gridtracker-releases/$ver/gridtracker-$ver-arm-64
	arm32=https://gridtracker.org/index.php/component/osdownloads/download/gridtracker-releases/$ver/gridtracker-$ver-arm-32
	deb=https://gridtracker.org/index.php/component/osdownloads/download/gridtracker-releases/$ver/gridtracker-$ver-all.deb


	# Download gridtracker binary
    if [[ "$BAPCPU" == *"ar"* ]]; then
		if [ `getconf LONG_BIT` = '32' ]; then
			wget --quiet --tries 2 --connect-timeout=60 $arm32 -O GridTracker.tar.gz
		else
			wget --quiet --tries 2 --connect-timeout=60 $arm64 -O GridTracker.tar.gz
		fi
	else
		wget --quiet --tries 2 --connect-timeout=60 $deb -O GridTracker.tar.gz
	fi

	######install nwjs
	# https://github.com/nwjs/npm-installer
	# https://nwjs.io/downloads/
	# https://github.com/LeonardLaszlo/nw.js-armv7-binaries
	
	#nwjs_status=$(dpkg -s nwjs-downloader | grep 'install ok installed')

	#if [[ "$nwjs_status" == *"install ok"* ]]; then
	#	echo -e "INFORMATIONAL: node-webkit Node.js found installed"
	#else
	#	echo -e "INFORMATIONAL: node-webkit Node.js instaling 1.3GB download"

	#	wget  --quiet --connect-timeout=30 https://downloads.gridtracker.org/nwjs-downloader/v0.68.1-5/nwjs-downloader_0.68.1-1_all.deb
	#	sudo dpkg -i nwjs-downloader_0.68.1-1_all.deb
	#fi

	# get gridtracker
	if [[ "$BAPCPU" == *"ar"* ]]; then
		echo -e "INFORMATIONAL: PI install unpacking archives"
		tar -xzvf GridTracker.tar.gz > /dev/null 2>&1
		rm -f *.tar.gz
		mv GridTracker-* GridTracker

		if [ -d "${HOME}/GridTracker" ];then
			echo -e "INFORMATIONAL: GridTracker into ${HOME} exists replacing"
			mv ${HOME}/GridTracker ./GridTracker.bak
			cp -r GridTracker/ ${HOME}
			sudo ln -fns ${HOME}/GridTracker/GridTracker /usr/local/bin/GridTracker
		else
			echo -e "INFORMATIONAL: installing into ${HOME}"
			cp -r GridTracker/ ${HOME}
		fi

		echo $ver > ${HOME}/GridTracker/GridTrackerVersion.txt

	else
		#not-a-PI
		echo -e "INFORMATIONAL: DEB install package"
		grid_status=$(dpkg -s gridtracker | grep 'install ok installed')
		sudo dpkg -i gridtracker*.deb
	fi
}

VERSION(){
    if [ -f ${HOME}/GridTracker/GridTrackerVersion.txt ];then
        CURRENT=$(cat ${HOME}/GridTracker/GridTrackerVersion.txt)
    else
        CURRENT=UNK
    fi
    NEWVER=$(curl --max-time 20 -s https://gridtracker.org/index.php/downloads/gridtracker | grep osdownloads-container -A 4 | sed 's/.*">//' | grep -m 1 v | sed 's/<\/a> <\/h3>//' | sed 's/v//')
}
