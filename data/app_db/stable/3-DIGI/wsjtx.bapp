BAPP=4
ID=WSJTX
Name=WSJT-X
Comment='FST4, FST4W, FT4, FT8, JT4, JT9, JT65, Q65, MSK144, and WSPR'
VerLocal=0
VerRemote=0
W3='https://wsjt.sourceforge.io/wsjtx.html'
Author='spud'
NOTE='installed to /usr/local/bin \n to get better performance note .. renice -n -19 -u wsjtx'

INSTALL(){
    echo -e "INFORMATIONAL: apt-get required packages"
    sudo apt-get -y install gfortran >> errors/apt.log
    sudo apt-get -y install fftw3-dev >> errors/apt.log
    sudo apt-get -y install libqt5sql5-sqlite >> errors/apt.log
    sudo apt-get -y install libtool >> errors/apt.log
    sudo apt-get -y install libudev1 >> errors/apt.log
    sudo apt-get -y install libudev-dev >> errors/apt.log
    sudo apt-get -y install texinfo >> errors/apt.log
    sudo apt-get -y install asciidoctor >> errors/apt.log
    sudo apt-get -y install ntp >> errors/apt.log

    # Detect cortex chip (ARM's)
    if [[ "$BAPCPU" == *"ar"* ]]; then 
        FREEMEM=$(free -m | grep Mem: | awk '{ print $2 }')
        #increase swap file if less than 3G memory
        if [ ${FREEMEM} -lt 3000 ]; then
            echo "Increasing Swap size for build"
            sudo sed -i 's/#CONF_SWAPFILE=\/var\/swap/CONF_SWAPFILE=\/var\/swap/' /etc/dphys-swapfile
            sudo sed -i 's/CONF_SWAPSIZE=100/CONF_SWAPSIZE=1024/' /etc/dphys-swapfile
            sudo /etc/init.d/dphys-swapfile restart
            sleep 10
        fi
    fi

    cd ${BAPSRC} || return
    sudo rm -rf wsjtx
    mkdir wsjtx
    cd wsjtx

    # Find stable (2.7*) and dev candidate (3*) releases
    WSJTX_HTML=$(curl -s https://wsjt.sourceforge.io/wsjtx.html)
    
    # Stable: wsjtx-2.7*
    STABLE_URL=$(echo "$WSJTX_HTML" | grep -oP 'href="\K[^"]*wsjtx-2\.7[^"]*\.tgz' | head -1)
    STABLE_PKG=$(basename "$STABLE_URL")
    STABLE_DIR=$(basename "$STABLE_URL" .tgz)
    STABLE_VER=$(echo "$STABLE_DIR" | sed 's/wsjtx-//')
    
    # Dev: wsjtx-3* (source .tgz, dash not underscore)
    DEV_URL=$(echo "$WSJTX_HTML" | grep -oP 'href="\K[^"]*wsjtx-3[^"]*\.tgz' | head -1)
    if [ -n "$DEV_URL" ]; then
        DEV_PKG=$(basename "$DEV_URL")
        DEV_DIR=$(basename "$DEV_URL" .tgz)
        DEV_VER=$(echo "$DEV_DIR" | sed 's/wsjtx-//')
        BUTTONS="--button=Stable $STABLE_VER:0 --button=Candidate $DEV_VER:2"
        TEXT="Use stable ($STABLE_VER), or dev candidate $DEV_VER branch? (recommend: stable)"
    else
        DEV_VER=""
        BUTTONS="--button=Stable $STABLE_VER:0"
        TEXT="Use stable ($STABLE_VER). No dev candidate source available."
    fi

    action=$(yad --center --title "Question which release" --image "dialog-question" $BUTTONS --text "$TEXT")
    return_code=$?

    if [ "$return_code" -eq 0 ]; then
        # Stable
        wget --tries 2 --connect-timeout=20 "https://wsjt.sourceforge.io/$STABLE_URL" -O "$STABLE_PKG"
        tar -xvf "$STABLE_PKG"
        rm "$STABLE_PKG"
        cd "$STABLE_DIR"
        echo "$STABLE_VER" > "${HOME}/.bap.wsjt.txt"
    elif [ "$return_code" -eq 2 ] && [ -n "$DEV_URL" ]; then
        # Dev Candidate
        wget --tries 2 --connect-timeout=20 "https://wsjt.sourceforge.io/$DEV_URL" -O "$DEV_PKG"
        tar -xvf "$DEV_PKG"
        rm "$DEV_PKG"
        cd "$DEV_DIR"
        echo "$DEV_VER" > "${HOME}/.bap.wsjt.txt"
    else
        echo "No valid candidate selected or candidate not available."
        return 1
    fi

    action=$(yad --center --title "Question which release" --image "dialog-question" $BUTTONS --text "$TEXT")
    return_code="${?:-'2'}"

    if [ "$return_code" -eq 0 ]; then
        # Stable
        wget --tries 2 --connect-timeout=20 "https://wsjt.sourceforge.io/$STABLE_URL" -O "$STABLE_PKG"
        tar -xvf "$STABLE_PKG"
        rm "$STABLE_PKG"
        cd "$STABLE_DIR"
        echo "$STABLE_VER" > "${HOME}/.bap.wsjt.txt"
    else
        # Dev Candidate
        wget --tries 2 --connect-timeout=20 "https://wsjt.sourceforge.io/$DEV_URL" -O "$DEV_PKG"
        tar -xvf "$DEV_PKG"
        rm "$DEV_PKG"
        cd "$DEV_DIR"
        echo "$DEV_VER" > "${HOME}/.bap.wsjt.txt"
    fi
    
    cmake -D WSJT_SKIP_MANPAGES=ON -D WSJT_GENERATE_DOCS=OFF .
    sudo cmake --build . --target install -j$BAPCORE

    # Detect cortex chip (ARM's)
    if [[ "$BAPCPU" == *"ar"* ]]; then 
        #reset swap size to default
        if [ ${FREEMEM} -lt 3000 ]; then
            echo "Resetting swap size to default"
            sudo sed -i 's/CONF_SWAPFILE=\/var\/swap/#CONF_SWAPFILE=\/var\/swap/' /etc/dphys-swapfile
            sudo sed -i 's/CONF_SWAPSIZE=1024/CONF_SWAPSIZE=100/' /etc/dphys-swapfile
            sudo /etc/init.d/dphys-swapfile restart
            sleep 10
        fi
    fi
}

VERSION(){
    if [[ $(whereis wsjtx | grep bin) ]]; then
        if [ -f ${HOME}/.bap.wsjt.txt ]; then
            CURRENT=$(cat ${HOME}/.bap.wsjt.txt)
        else
            CURRENT=UNKNOWN
        fi
    else
        CURRENT=NONE
    fi

    WSJTX_HTML=$(curl --max-time 20 -s https://wsjt.sourceforge.io/wsjtx.html)
    STABLE_VER=$(echo "$WSJTX_HTML" | grep -oP 'href="\K[^"]*wsjtx-2\.7[^"]*\.tgz' | head -1 | sed 's/.*wsjtx-//' | sed 's/\.tgz//')
    DEV_URL=$(echo "$WSJTX_HTML" | grep -oP 'href="\K[^"]*wsjtx-3[^"]*\.tgz' | head -1)
    if [ -n "$DEV_URL" ]; then
        DEV_VER=$(echo "$DEV_URL" | sed 's/.*wsjtx-//' | sed 's/\.tgz//')
        NEWVER="Stable: $STABLE_VER, DEV: $DEV_VER"
    else
        NEWVER="Stable: $STABLE_VER"
    fi
}

DEPENDS(){
    NEEDED=''

    #apt-gets will be checked on app-check
}