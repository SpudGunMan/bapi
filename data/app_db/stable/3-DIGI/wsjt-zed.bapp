BAPP=4
ID=WSJT-ZED
Name=WSJT-Zed
Comment='WSJT-Zed Project'
VerLocal=0
VerRemote=0
W3=''
Author='spud'
NOTE='binary is put into ~/wsjtz/bin'

INSTALL(){
    echo -e "INFORMATIONAL: apt-get required packages"
    sudo apt-get -y install gfortran >> errors/apt.log
    sudo apt-get -y install fftw3-dev >> errors/apt.log
    sudo apt-get -y install libqt5sql5-sqlite >> errors/apt.log
    sudo apt-get -y install libtool >> errors/apt.log
    sudo apt-get -y install texinfo >> errors/apt.log
    sudo apt-get -y install asciidoctor >> errors/apt.log
    sudo apt-get -y install ntp >> errors/apt.log

    cd ${BAPSRC} || return

    # Detect cortex chip (ARM's)
    if [ -f /etc/init.d/dphys-swapfile ] && [[ "$BAPCPU" == *"ar"* ]]; then 
        FREEMEM=$(free -m | grep Mem: | awk '{ print $2 }')
        if [ ${FREEMEM} -lt 3000 ]; then
            echo "Increasing Swap size for build"
            sudo sed -i 's/#CONF_SWAPFILE=\/var\/swap/CONF_SWAPFILE=\/var\/swap/' /etc/dphys-swapfile
            sudo sed -i 's/CONF_SWAPSIZE=100/CONF_SWAPSIZE=1024/' /etc/dphys-swapfile
            sudo /etc/init.d/dphys-swapfile restart
            sleep 10
        fi
    fi

    cd ${BAPSRC}
    sudo rm -rf wsjtz
    mkdir wsjtz
    cd wsjtz

    # Find stable (2.*) and dev (3.*) releases
    WSJTZ_HTML=$(curl -s https://sourceforge.net/projects/wsjt-z/files/Source/)

    # Stable: wsjtz-2.*
    STABLE_URL=$(echo "$WSJTZ_HTML" | grep -oP 'href="\K[^"]*wsjtz-2\.[^"]*\.zip' | head -1)
    STABLE_PKG=$(basename "$STABLE_URL")
    STABLE_DIR=$(basename "$STABLE_URL" .zip)
    STABLE_VER=$(echo "$STABLE_DIR" | sed 's/wsjtz-//')

    # Dev: wsjtz-3.*
    DEV_URL=$(echo "$WSJTZ_HTML" | grep -oP 'href="\K[^"]*wsjtz-3[^"]*\.zip' | head -1)
    if [ -n "$DEV_URL" ]; then
        DEV_PKG=$(basename "$DEV_URL")
        DEV_DIR=$(basename "$DEV_URL" .zip)
        DEV_VER=$(echo "$DEV_DIR" | sed 's/wsjtz-//')
        BUTTONS="--button=\"Stable:0\" --button=\"Candidate $DEV_VER:2\""
        TEXT="Use stable ($STABLE_VER), or dev candidate $DEV_VER branch? (recommend: stable)"
    else
        DEV_VER=""
        BUTTONS="--button=\"Stable:0\""
        TEXT="Use stable ($STABLE_VER). No dev candidate source available."
    fi

    action=$(yad --center --title "Question which release" --image "dialog-question" $BUTTONS --text "$TEXT")
    return_code="${?:-'2'}"

    if [ "$return_code" -eq 0 ]; then
        # Stable
        wget --tries 2 --connect-timeout=60 "https://sourceforge.net/projects/wsjt-z/files/Source/$STABLE_URL" -O "$STABLE_PKG"
        unzip "$STABLE_PKG"
        rm "$STABLE_PKG"
        cd "$STABLE_DIR"
        echo "$STABLE_VER" > "${HOME}/.bap.wsjtzed.txt"
    elif [ "$return_code" -eq 2 ] && [ -n "$DEV_URL" ]; then
        # Dev Candidate
        wget --tries 2 --connect-timeout=60 "https://sourceforge.net/projects/wsjt-z/files/Source/$DEV_URL" -O "$DEV_PKG"
        unzip "$DEV_PKG"
        rm "$DEV_PKG"
        cd "$DEV_DIR"
        echo "$DEV_VER" > "${HOME}/.bap.wsjtzed.txt"
    else
        echo "No valid candidate selected or candidate not available."
        return 1
    fi


    action=$(yad --center --title "Question which release" --image "dialog-question" --button="Stable:0" --button="Candidate $DEV_VER:2" --text "Use stable ($STABLE_VER), or dev candidate $DEV_VER branch? (recommend: stable)")
    return_code="${?:-'2'}"

    if [ "$return_code" -eq 0 ]; then
        # Stable
        wget --tries 2 --connect-timeout=60 "https://sourceforge.net/projects/wsjt-z/files/Source/$STABLE_URL" -O "$STABLE_PKG"
        unzip "$STABLE_PKG"
        rm "$STABLE_PKG"
        cd "$STABLE_DIR"
        echo "$STABLE_VER" > "${HOME}/.bap.wsjtzed.txt"
    else
        # Dev Candidate
        wget --tries 2 --connect-timeout=60 "https://sourceforge.net/projects/wsjt-z/files/Source/$DEV_URL" -O "$DEV_PKG"
        unzip "$DEV_PKG"
        rm "$DEV_PKG"
        cd "$DEV_DIR"
        echo "$DEV_VER" > "${HOME}/.bap.wsjtzed.txt"
    fi

    cmake -D CMAKE_INSTALL_PREFIX=${HOME}/wsjtz -D WSJT_SKIP_MANPAGES=ON -D WSJT_GENERATE_DOCS=OFF . 
    sudo cmake --build . --target install -j$BAPCORE

    # Detect cortex chip (ARM's)
    if [ -f /etc/init.d/dphys-swapfile ] && [[ "$BAPCPU" == *"ar"* ]]; then 
        if [ ${FREEMEM} -lt 3000 ]; then
            echo "Resetting swap size to default"
            sudo sed -i 's/CONF_SWAPFILE=\/var\/swap/#CONF_SWAPFILE=\/var\/swap/' /etc/dphys-swapfile
            sudo sed -i 's/CONF_SWAPSIZE=1024/CONF_SWAPSIZE=100/' /etc/dphys-swapfile
            sudo /etc/init.d/dphys-swapfile restart
            sleep 10
        fi
    fi
}

VERSION(){
    if [ -d ${HOME}/wsjtz ];then
        if [ -f ${HOME}/.bap.wsjtzed.txt ]; then
            CURRENT=$(cat ${HOME}/.bap.wsjtzed.txt)
        else
            CURRENT=UNKNOWN
        fi
    else
        CURRENT=NONE
    fi

    WSJTZ_HTML=$(curl --max-time 20 -s https://sourceforge.net/projects/wsjt-z/files/Source/)
    STABLE_VER=$(echo "$WSJTZ_HTML" | grep -oP 'href="\K[^"]*wsjtz-2\.[^"]*\.zip' | head -1 | sed 's/.*wsjtz-//' | sed 's/\.zip//')
    DEV_URL=$(echo "$WSJTZ_HTML" | grep -oP 'href="\K[^"]*wsjtz-3[^"]*\.zip' | head -1)
    if [ -n "$DEV_URL" ]; then
        DEV_VER=$(basename "$DEV_URL" .zip | sed 's/wsjtz-//')
        NEWVER="Stable: $STABLE_VER, Candidate: $DEV_VER"
    else
        NEWVER="Stable: $STABLE_VER, No dev candidate source available"
    fi
}

DEPENDS(){
    NEEDED=''

    #apt-gets will be checked on app-check
}
