BAPP=4
ID=HAMLIB
Name=hamlib
Comment='hamlib rig control'
VerLocal=0
VerRemote=0
W3='https://sourceforge.net/projects/hamlib/support'
Author='spud'
NOTE="Allows install of github or sourceforge code \n typically github is newer. \n Will detect and install python libs as well"

INSTALL(){
    #stop the default from installing and yeeet it out of here
    echo -e "INFORMATIONAL: apt-get hold and remove all existing"
    sudo apt-mark hold libhamlib*
    sudo apt-mark hold python3-hamlib
    sudo apt-get -y remove libhamlib*
    
    echo -e "INFORMATIONAL: apt-get required packages"
    sudo apt-get -y install swig >> errors/apt.log
    sudo apt-get -y install ibnova-dev 2>&1 >> errors/apt.log
    sudo apt-get -y install ibgd-dev 2>&1 >> errors/apt.log
    sudo apt-get -y install libindi-dev 2>&1 >> errors/apt.log
    sudo apt-get -y install libxml2-dev 2>&1 >> errors/apt.log

    cd ${BAPSRC}

    action=$(yad --center --title "Question" --image "dialog-question"\
        --button="GitHub:0" --button="SourceForge:2" \
        --text "Use github source or sourceforge (recomend: github, newer)")
    return_code="${?:-'2'}"

    if [ "$return_code" -eq 0 ]; then
        dl_source="github"
        echo -e "INFORMATIONAL: github"
    else
        dl_source="sf"
        echo -e "INFORMATIONAL: sourceforge"
    fi

    if [ "$dl_source" == "github" ]; then
        rm -rf Hamlib
        git clone https://github.com/Hamlib/Hamlib
        cd Hamlib
        ./bootstrap
    else
        rm -rf hamlib-*
        # URL detectionis common how to clean up? switch to soapy?
        NEWRIG=$(curl -s https://sourceforge.net/projects/hamlib/files/latest/download |
            grep -o https://downloads.sourceforge.net/project/hamlib/hamlib/[0-9].[0-9] |
            head -n 1 | awk -F "/" '{print $7}')

        # download source to standard?
        HAMLIBLINK=https://sourceforge.net/projects/hamlib/files/hamlib/${NEWRIG}/hamlib-${NEWRIG}.tar.gz

        # function? with retry timeout and setting it to the sources directory?
        wget --tries 2 --connect-timeout=60 ${HAMLIBLINK}

        tar -xzf hamlib-${NEWRIG}.tar.gz
        rm hamlib-${NEWRIG}.tar.gz
        cd hamlib-${NEWRIG} || return
    fi

    if [[ $(whereis python3 | grep bin) ]];then
        pypath=$(which python3)
        pyver=$(python3 -V | sed 's/Python //' | cut -d "." -f1,2)
        export PYTHON=$pypath
        export PYTHONPATH=/usr/local/lib/python$pyver/site-packages/
        ./configure --disable-rotator
        ./configure --with-xml-support --with-python-binding PYTHON_VERSION=$pyver 

    else
        ./configure --disable-rotator
        ./configure --with-xml-support
    fi

    make -j$BAPCORE
    sudo make install
    sudo ldconfig
}
VERSION(){
    if [[ $(whereis rigctld | grep bin) ]];then
        CURRENT=$(rigctl --version 2>/dev/null | sed 's/rigctl Hamlib //' | cut -d " " -f1)
    else
        CURRENT=NONE
    fi

    # Get latest SourceForge version
    SF_VER=$(curl --max-time 20 -s https://sourceforge.net/projects/hamlib/files/latest/download |
        grep -o https://downloads.sourceforge.net/project/hamlib/hamlib/[0-9].[0-9] |
        head -n 1 | awk -F "/" '{print $7}')

    # Get latest GitHub release tag
    GH_VER=$(curl --max-time 20 -s https://api.github.com/repos/Hamlib/Hamlib/releases/latest | grep '"tag_name":' | sed 's/.*"tag_name": *"//;s/".*//')

    NEWVER="SF: $SF_VER, GH: $GH_VER"
}

DEPENDS(){
    NEEDED=""
}
